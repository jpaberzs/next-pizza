generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  verified  DateTime 

  verificationCode VerificationCode?

  provider   String?
  providerId String?
 
  cart       Cart?
  order      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String   @unique

  products     Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  imageUrl     String
   
  ingredients  Ingredient[]
  productItems ProductItem[]
  category     Category @relation(fields: [categoryID], references: [id])
  categoryID   Int
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Ingredient {
  id            Int        @id @default(autoincrement())
  name          String
  price         Int
  imageUrl      String
  products      Product[]
  cartItems     CartItem[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ProductItem {
  id        Int        @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  product   Product    @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Cart {
  id          Int      @id @default(autoincrement())
  token       String

  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?     @unique

  items       CartItem[]

  totalAmount Int      @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id            Int         @id @default(autoincrement())

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart          Cart        @relation(fields: [cartId], references: [id])
  cartId        Int

  quantity      Int

  ingredients   Ingredient[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Order {
  id          Int @id @default(autoincrement())

  userId      Int?
  user        User? @relation(fields: [userId], references: [id])

  token       String

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?

  items       Json

  fullName    String
  email       String
  phone       String
  address     String
  comment     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationCode {
  id     Int  @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code   String

  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}